version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bruno-track-db
    environment:
      POSTGRES_DB: bruno_track
      POSTGRES_USER: bruno_user
      POSTGRES_PASSWORD: bruno_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bruno_user -d bruno_track"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bruno-network

  # BrunoTrack Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bruno-track-app
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://bruno_user:bruno_password@postgres:5432/bruno_track
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bruno-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: bruno-track-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - bruno-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  bruno-network:
    driver: bridge 