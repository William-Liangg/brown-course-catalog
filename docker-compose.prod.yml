version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bruno-track-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bruno_track}
      POSTGRES_USER: ${POSTGRES_USER:-bruno_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bruno_user} -d ${POSTGRES_DB:-bruno_track}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bruno-network
    restart: unless-stopped

  # BrunoTrack Application
  app:
    image: bruno-track:latest
    container_name: bruno-track-app-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-bruno_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-bruno_track}
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bruno-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  bruno-network:
    driver: bridge 